# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Generate and Coverage Report

on:
  push:
    branches:
      - dev  # Adjust this to your branch name

jobs:
  generate_and_send_report:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests and generate coverage
      run: |
        dotnet tool install --global coverlet.console
        dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura

    - name: Check coverage file
      run: test -e TestProject2/coverage.cobertura.xml

    - name: Generate Coverage Report
      if: success()
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool --version 4.7.0
        reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coverage

    - name: ReportGenerator
      if: success()
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'coverage.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, OpenCover, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, Html_BlueRed_Summary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, SvgChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        sourcedirs: '' # Optional directories which contain the corresponding source code (separated by semicolon). The source directories are used if coverage report contains classes without path information.
        historydir: '' # Optional directory for storing persistent coverage information. Can be used in future reports to show coverage evolution.
        plugins: '' # Optional plugin files for custom reports or custom history storage (separated by semicolon).
        assemblyfilters: '+*' # Optional list of assemblies that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        classfilters: '+*' # Optional list of classes that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        filefilters: '+*' # Optional list of files that should be included or excluded in the report. Exclusion filters take precedence over inclusion filters. Wildcards are allowed.
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: '' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        license: '' # Optional license for PRO version. Get your license here: https://reportgenerator.io/pro
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.

    - name: Upload coverage report artifact
      uses: actions/upload-artifact@v2.2.3
      with:
        name: CoverageReport # Artifact name        
        path: coveragereport # Directory containing files to upload

    - name: Notify Discord
      if: success()
      env:
        DISCORD_WEBHOOK_URL: "https://discord.com/api/webhooks/1176974224586448997/BpjGhFnnJc3x2SpLmVXZpVFcSXOlKv7XvilaL0wAPAN1lBEmOpzoG8O8P3TG9QAhWjt3"
      run: |
        run_url="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
        curl -X POST -H "Content-Type: application/json" -d "{\"content\":\"GitHub Action completed! View details [here]($run_url)\"}" \
        "https://discord.com/api/webhooks/1176974224586448997/BpjGhFnnJc3x2SpLmVXZpVFcSXOlKv7XvilaL0wAPAN1lBEmOpzoG8O8P3TG9QAhWjt3"


